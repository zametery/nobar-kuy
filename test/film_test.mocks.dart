// Mocks generated by Mockito 5.2.0 from annotations
// in dicoding_expert/test/film_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dicoding_expert/data/models/film_model.dart' as _i9;
import 'package:dicoding_expert/data/repositories/src/film_local_datasource.dart'
    as _i10;
import 'package:dicoding_expert/data/repositories/src/film_remote_datasource.dart'
    as _i8;
import 'package:dicoding_expert/domain/entities/film_entity.dart' as _i6;
import 'package:dicoding_expert/domain/repositories/film_repository.dart'
    as _i5;
import 'package:dicoding_expert/state/data/data_state.dart' as _i2;
import 'package:dicoding_expert/utils/enum.dart' as _i7;
import 'package:hive_flutter/hive_flutter.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDataState_0<T> extends _i1.Fake implements _i2.DataState<T> {}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i3.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values =>
      (super.noSuchMethod(Invocation.getter(#values), returnValue: <E>[])
          as Iterable<E>);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);
  @override
  bool get lazy =>
      (super.noSuchMethod(Invocation.getter(#lazy), returnValue: false)
          as bool);
  @override
  Iterable<dynamic> get keys =>
      (super.noSuchMethod(Invocation.getter(#keys), returnValue: <dynamic>[])
          as Iterable<dynamic>);
  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);
  @override
  Iterable<E> valuesBetween({dynamic startKey, dynamic endKey}) =>
      (super.noSuchMethod(
          Invocation.method(
              #valuesBetween, [], {#startKey: startKey, #endKey: endKey}),
          returnValue: <E>[]) as Iterable<E>);
  @override
  E? getAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#getAt, [index])) as E?);
  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(Invocation.method(#toMap, []),
      returnValue: <dynamic, E>{}) as Map<dynamic, E>);
  @override
  dynamic keyAt(int? index) =>
      super.noSuchMethod(Invocation.method(#keyAt, [index]));
  @override
  _i4.Stream<_i3.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
      Invocation.method(#watch, [], {#key: key}),
      returnValue: Stream<_i3.BoxEvent>.empty()) as _i4.Stream<_i3.BoxEvent>);
  @override
  bool containsKey(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  _i4.Future<void> put(dynamic key, E? value) =>
      (super.noSuchMethod(Invocation.method(#put, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> putAt(int? index, E? value) =>
      (super.noSuchMethod(Invocation.method(#putAt, [index, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> putAll(Map<dynamic, E>? entries) =>
      (super.noSuchMethod(Invocation.method(#putAll, [entries]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<int> add(E? value) =>
      (super.noSuchMethod(Invocation.method(#add, [value]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<Iterable<int>> addAll(Iterable<E>? values) =>
      (super.noSuchMethod(Invocation.method(#addAll, [values]),
              returnValue: Future<Iterable<int>>.value(<int>[]))
          as _i4.Future<Iterable<int>>);
  @override
  _i4.Future<void> delete(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#delete, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#deleteAt, [index]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteAll(Iterable<dynamic>? keys) =>
      (super.noSuchMethod(Invocation.method(#deleteAll, [keys]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> compact() =>
      (super.noSuchMethod(Invocation.method(#compact, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<int> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteFromDisk() =>
      (super.noSuchMethod(Invocation.method(#deleteFromDisk, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> flush() => (super.noSuchMethod(Invocation.method(#flush, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [FilmRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilmRepository extends _i1.Mock implements _i5.FilmRepository {
  MockFilmRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<List<_i6.FilmEntity>>> getNowPlayingFilms(
          _i7.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingFilms, [type]),
              returnValue: Future<_i2.DataState<List<_i6.FilmEntity>>>.value(
                  _FakeDataState_0<List<_i6.FilmEntity>>()))
          as _i4.Future<_i2.DataState<List<_i6.FilmEntity>>>);
  @override
  _i4.Future<_i2.DataState<List<_i6.FilmEntity>>> getPopularFilms(
          _i7.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getPopularFilms, [type]),
              returnValue: Future<_i2.DataState<List<_i6.FilmEntity>>>.value(
                  _FakeDataState_0<List<_i6.FilmEntity>>()))
          as _i4.Future<_i2.DataState<List<_i6.FilmEntity>>>);
  @override
  _i4.Future<_i2.DataState<List<_i6.FilmEntity>>> getTopRatedFilms(
          _i7.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getTopRatedFilms, [type]),
              returnValue: Future<_i2.DataState<List<_i6.FilmEntity>>>.value(
                  _FakeDataState_0<List<_i6.FilmEntity>>()))
          as _i4.Future<_i2.DataState<List<_i6.FilmEntity>>>);
  @override
  _i4.Future<_i2.DataState<_i6.FilmEntity>> getDetailFilm(
          _i7.FilmType? type, int? id) =>
      (super.noSuchMethod(Invocation.method(#getDetailFilm, [type, id]),
              returnValue: Future<_i2.DataState<_i6.FilmEntity>>.value(
                  _FakeDataState_0<_i6.FilmEntity>()))
          as _i4.Future<_i2.DataState<_i6.FilmEntity>>);
  @override
  _i4.Future<_i2.DataState<List<_i6.FilmEntity>>> getRecommendationFilms(
          _i7.FilmType? type, int? id) =>
      (super.noSuchMethod(
              Invocation.method(#getRecommendationFilms, [type, id]),
              returnValue: Future<_i2.DataState<List<_i6.FilmEntity>>>.value(
                  _FakeDataState_0<List<_i6.FilmEntity>>()))
          as _i4.Future<_i2.DataState<List<_i6.FilmEntity>>>);
  @override
  _i4.Future<_i2.DataState<List<_i6.FilmEntity>>> searchFilms(
          _i7.FilmType? type, String? query) =>
      (super.noSuchMethod(Invocation.method(#searchFilms, [type, query]),
              returnValue: Future<_i2.DataState<List<_i6.FilmEntity>>>.value(
                  _FakeDataState_0<List<_i6.FilmEntity>>()))
          as _i4.Future<_i2.DataState<List<_i6.FilmEntity>>>);
  @override
  _i4.Future<_i2.DataState<List<_i6.FilmEntity>>> getWatchlistFilms(
          _i7.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getWatchlistFilms, [type]),
              returnValue: Future<_i2.DataState<List<_i6.FilmEntity>>>.value(
                  _FakeDataState_0<List<_i6.FilmEntity>>()))
          as _i4.Future<_i2.DataState<List<_i6.FilmEntity>>>);
  @override
  _i4.Future<_i2.DataState<bool>> addFilmToWatchlist(
          _i7.FilmType? type, _i6.FilmEntity? film) =>
      (super.noSuchMethod(Invocation.method(#addFilmToWatchlist, [type, film]),
              returnValue:
                  Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>()))
          as _i4.Future<_i2.DataState<bool>>);
  @override
  _i4.Future<_i2.DataState<bool>> getHasExistInWatchlist(
          _i7.FilmType? type, int? id) =>
      (super.noSuchMethod(
              Invocation.method(#getHasExistInWatchlist, [type, id]),
              returnValue:
                  Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>()))
          as _i4.Future<_i2.DataState<bool>>);
  @override
  _i4.Future<_i2.DataState<bool>> removeFilmFromWatchlist(
          _i7.FilmType? type, int? id) =>
      (super.noSuchMethod(
              Invocation.method(#removeFilmFromWatchlist, [type, id]),
              returnValue:
                  Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>()))
          as _i4.Future<_i2.DataState<bool>>);
}

/// A class which mocks [FilmRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilmRemoteDataSource extends _i1.Mock
    implements _i8.FilmRemoteDataSource {
  MockFilmRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<List<_i9.FilmModel>>> getNowPlayingFilms(
          _i7.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingFilms, [type]),
              returnValue: Future<_i2.DataState<List<_i9.FilmModel>>>.value(
                  _FakeDataState_0<List<_i9.FilmModel>>()))
          as _i4.Future<_i2.DataState<List<_i9.FilmModel>>>);
  @override
  _i4.Future<_i2.DataState<List<_i9.FilmModel>>> getPopularFilms(
          _i7.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getPopularFilms, [type]),
              returnValue: Future<_i2.DataState<List<_i9.FilmModel>>>.value(
                  _FakeDataState_0<List<_i9.FilmModel>>()))
          as _i4.Future<_i2.DataState<List<_i9.FilmModel>>>);
  @override
  _i4.Future<_i2.DataState<List<_i9.FilmModel>>> getRecommendationFilms(
          _i7.FilmType? type, int? id) =>
      (super.noSuchMethod(
              Invocation.method(#getRecommendationFilms, [type, id]),
              returnValue: Future<_i2.DataState<List<_i9.FilmModel>>>.value(
                  _FakeDataState_0<List<_i9.FilmModel>>()))
          as _i4.Future<_i2.DataState<List<_i9.FilmModel>>>);
  @override
  _i4.Future<_i2.DataState<List<_i9.FilmModel>>> getTopRatedFilms(
          _i7.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getTopRatedFilms, [type]),
              returnValue: Future<_i2.DataState<List<_i9.FilmModel>>>.value(
                  _FakeDataState_0<List<_i9.FilmModel>>()))
          as _i4.Future<_i2.DataState<List<_i9.FilmModel>>>);
  @override
  _i4.Future<_i2.DataState<List<_i9.FilmModel>>> searchFilms(
          _i7.FilmType? type, String? query) =>
      (super.noSuchMethod(Invocation.method(#searchFilms, [type, query]),
              returnValue: Future<_i2.DataState<List<_i9.FilmModel>>>.value(
                  _FakeDataState_0<List<_i9.FilmModel>>()))
          as _i4.Future<_i2.DataState<List<_i9.FilmModel>>>);
  @override
  _i4.Future<_i2.DataState<_i9.FilmModel>> getDetailFilm(
          _i7.FilmType? type, int? id) =>
      (super.noSuchMethod(Invocation.method(#getDetailFilm, [type, id]),
              returnValue: Future<_i2.DataState<_i9.FilmModel>>.value(
                  _FakeDataState_0<_i9.FilmModel>()))
          as _i4.Future<_i2.DataState<_i9.FilmModel>>);
}

/// A class which mocks [FilmLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilmLocalDataSource extends _i1.Mock
    implements _i10.FilmLocalDataSource {
  MockFilmLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<bool>> addFilmToWatchlist(
          _i7.FilmType? type, _i9.FilmModel? film) =>
      (super.noSuchMethod(Invocation.method(#addFilmToWatchlist, [type, film]),
              returnValue:
                  Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>()))
          as _i4.Future<_i2.DataState<bool>>);
  @override
  _i4.Future<_i2.DataState<bool>> getHasExistInWatchlist(
          _i7.FilmType? type, int? id) =>
      (super.noSuchMethod(
              Invocation.method(#getHasExistInWatchlist, [type, id]),
              returnValue:
                  Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>()))
          as _i4.Future<_i2.DataState<bool>>);
  @override
  _i4.Future<_i2.DataState<List<_i9.FilmModel>>> getWatchlistFilms(
          _i7.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getWatchlistFilms, [type]),
              returnValue: Future<_i2.DataState<List<_i9.FilmModel>>>.value(
                  _FakeDataState_0<List<_i9.FilmModel>>()))
          as _i4.Future<_i2.DataState<List<_i9.FilmModel>>>);
  @override
  _i4.Future<_i2.DataState<bool>> removeFilmFromWatchlist(
          _i7.FilmType? type, int? id) =>
      (super.noSuchMethod(
              Invocation.method(#removeFilmFromWatchlist, [type, id]),
              returnValue:
                  Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>()))
          as _i4.Future<_i2.DataState<bool>>);
}
